generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id          String   @id @default(cuid())
  name        String
  phoneNumber String?
  userId      String?
  email       String?
  address     String
  city        String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  confirmed   Boolean  @default(false)
  registered  Boolean  @default(false)
  stores      Store[]  @relation("BusinessToStore")
  user        User?    @relation("BusinessToUser")

  @@unique([name, country], name: "business_identifier")
}

model User {
  id          String   @id @default(cuid())
  phoneNumber String?
  email       String?
  imageUrl    String?
  age         String?
  userName    String?  @unique
  businessId  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  business    Business @relation("BusinessToUser", fields: [businessId], references: [id])

  @@index([businessId])
}

model Store {
  id          String      @id @default(cuid())
  name        String
  phoneNumber String?
  address     String?
  city        String?
  country     String?
  userId      String?
  storeSlug   String?     @unique 
  businessId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  billboards  Billboard[] @relation("StoreToBillboard")
  colors      Color[]     @relation("StoreToColor")
  orders      Order[]     @relation("StoreToOrder")
  products    Product[]   @relation("StoreToProduct")
  sizes       Size[]      @relation("StoreToSize")
  business    Business    @relation("BusinessToStore", fields: [businessId], references: [id])

  @@index([businessId])
}

model Billboard {
  id                String   @id @default(cuid())
  label             String
  imageUrl          String
  promotionText     String?
  promotionImageUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  storeId           String
  store             Store    @relation("StoreToBillboard", fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id            String        @id @default(cuid())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]     @relation("CategoryToProduct")
  subcategories SubCategory[] @relation("CategoryToSubCategory")
}

model SubCategory {
  id         String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String
  products   Product[] @relation("SubcategoryToProduct")
  category   Category  @relation("CategoryToSubCategory", fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Product {
  id                   String           @id @default(cuid())
  name                 String
  slug                 String?          @unique
  description          String?          @db.VarChar(500)
  price                Decimal
  discountedPrice      Decimal?
  quantity             Decimal?
  isFeatured           Boolean          @default(false)
  isArchived           Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  blackFridayStartDate DateTime?
  blackFridayEndDate   DateTime?
  storeId              String
  categoryId           String
  subcategoryId        String
  sizeId               String
  colorId              String
  images               Image[]
  orderItems           OrderItem[]
  category             Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  color                Color            @relation(fields: [colorId], references: [id])
  size                 Size             @relation(fields: [sizeId], references: [id])
  store                Store            @relation("StoreToProduct", fields: [storeId], references: [id])
  subcategory          SubCategory      @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  productVariant       ProductVariant[]

  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sizeId])
  @@index([colorId])
}

model ProductVariant {
  id                   String    @id @default(cuid())
  colorId              String
  sizeId               String
  quantity             Int?
  price                Decimal
  discountedPrice      Decimal?
  blackFridayStartDate DateTime?
  blackFridayEndDate   DateTime?
  productId            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  images               Image[]
  color                Color     @relation(fields: [colorId], references: [id])
  product              Product   @relation(fields: [productId], references: [id])
  size                 Size      @relation(fields: [sizeId], references: [id])

  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model Size {
  id             String           @id @default(cuid())
  name           String
  value          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  storeId        String?
  products       Product[]
  productVariant ProductVariant[]
  store          Store?           @relation("StoreToSize", fields: [storeId], references: [id])

  @@index([storeId])
}

model Color {
  id             String           @id @default(cuid())
  name           String
  value          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  storeId        String?
  store          Store?           @relation("StoreToColor", fields: [storeId], references: [id])
  products       Product[]
  productVariant ProductVariant[]

  @@index([storeId])
}

model Order {
  id         String      @id @default(cuid())
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Image {
  id               String          @id @default(cuid())
  url              String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productId        String
  productVariantId String?
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productVariantId])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}
